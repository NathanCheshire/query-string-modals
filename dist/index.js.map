{"version":3,"sources":["../src/index.ts","../src/components/ModalManager.tsx"],"names":["React"],"mappings":"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","sourcesContent":["export * from \"./components/ManagedModal\";\nexport * from \"./components/ModalCallbacks\";\nexport { default as ModalProvider, useModal } from \"./components/ModalManager\";\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { ManagedModal } from \"./ManagedModal\";\nimport { ModalCallbacks } from \"./ModalCallbacks\";\n\ninterface ModalContextType {\n  /**\n   * Opens the modal with the provided ID if registered.\n   *\n   * @param modalId the ID of the modal to show\n   * @param callbacks the pre/post callbacks to invoke before/after opening the modal\n   * @param dataForModal the data to set for the modal to access\n   */\n  openModal: (\n    modalId: string,\n    callbacks?: ModalCallbacks,\n    dataForModal?: Record<string, any>\n  ) => void;\n\n  /**\n   * Closes the currently open modal if present.\n   *\n   * @param callbacks the pre/post callbacks to invoke before/after closing the modal\n   */\n  closeModal: (callbacks?: ModalCallbacks) => void;\n\n  /**\n   * The data/props for the current active modal if any.\n   */\n  currentModalProps?: Record<string, any>;\n\n  /**\n   * Registers the provided ManagedModal, overriding any previously managed modal with the same ID.\n   *\n   * @param modal the modal to register\n   */\n  registerModal: (modal: ManagedModal) => void;\n}\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\n/**\n * The modal context allowing a caller to access the following properties:\n * - the function to open a modal\n * - the function to close a modal\n * - the current props for the current modal\n * - the modal registration function\n *\n * @returns this modal context\n */\nexport const useModal = () => {\n  const context = useContext(ModalContext);\n\n  if (context === undefined) {\n    throw new Error(\"useModal must be used within a ModalProvider component\");\n  }\n\n  return context;\n};\n\nconst registeredModals = new Map<string, ManagedModal>();\n\n/**\n * Registers the provided ManagedModal, overriding any previously managed modal with the same ID.\n *\n * @param modal the modal to register\n */\nfunction registerModal(modal: ManagedModal) {\n  registeredModals.set(modal.modalId, modal);\n}\n\ninterface ModalProviderProps {\n  children: React.ReactNode;\n  modals: ManagedModal[];\n  modalQueryStringParameter?: string;\n}\n\n/**\n * A context provider providing children the ability to register modals with this manager,\n *  open them, close them, register additional modals, and access current modal state data.\n *\n * @param children the children of this provider\n * @param modals the initial modals this manager will manage\n * @param the queryStringParameter which controls which if any modal this manager is showing\n * @returns this provider\n */\nexport default function ModalProvider({\n  children,\n  modals,\n  modalQueryStringParameter = \"modal\",\n}: ModalProviderProps) {\n  const [currentModalId, setCurrentModalId] = useState<string | undefined>(\n    undefined\n  );\n  const [currentModalProps, setCurrentModalProps] = useState<\n    Record<string, any> | undefined\n  >(undefined);\n\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => refreshModalIdFromUrlParameter(), [searchParams]);\n  useEffect(() => reRegisterModals(), [modals]);\n\n  function reRegisterModals() {\n    modals.forEach((modal) => {\n      registeredModals.set(modal.modalId, modal);\n    });\n  }\n\n  /**\n   * Closes the currently open modal if present.\n   *\n   * @param callbacks the pre/post callbacks to invoke before/after closing the modal\n   */\n  function closeModal(callbacks?: ModalCallbacks) {\n    callbacks?.preAction?.();\n    removeModalIdFromUrlParameters();\n    callbacks?.postAction?.();\n  }\n\n  /**\n   * Opens the modal with the provided ID if registered.\n   *\n   * @param modalId the ID of the modal to show\n   * @param callbacks the pre/post callbacks to invoke before/after opening the modal\n   * @param dataForModal the data to set for the modal to access\n   */\n  function openModal(\n    modalId: string,\n    callbacks?: ModalCallbacks,\n    dataForModal?: Record<string, any>\n  ) {\n    setCurrentModalProps(dataForModal);\n\n    callbacks?.preAction?.();\n    setModalIdUrlParameter(modalId);\n    callbacks?.postAction?.();\n  }\n\n  function removeModalIdFromUrlParameters() {\n    const newSearchParams = new URLSearchParams(searchParams);\n    newSearchParams.delete(modalQueryStringParameter);\n    navigate(`${window.location.pathname}?${newSearchParams.toString()}`, {\n      replace: true,\n    });\n  }\n\n  function setModalIdUrlParameter(modalId: string) {\n    const newSearchParams = new URLSearchParams(searchParams);\n    newSearchParams.set(modalQueryStringParameter, modalId);\n    navigate(`${window.location.pathname}?${newSearchParams.toString()}`, {\n      replace: true,\n    });\n  }\n\n  function refreshModalIdFromUrlParameter() {\n    const modalId = searchParams.get(modalQueryStringParameter);\n    setCurrentModalId(modalId ?? undefined);\n  }\n\n  function getUrlForComparisonAgainstRegex() {\n    const pathname = window.location.pathname;\n    const search = window.location.search;\n    const hash = window.location.hash;\n    return pathname + search + hash;\n  }\n\n  function shouldIgnoreShowingCurrentModal(): boolean {\n    // No ID so obviously no modal will show\n    if (currentModalId === undefined) return true;\n    const currentModal = registeredModals.get(currentModalId);\n    const shouldIgnorePattern = currentModal?.ignoreUrlPattern;\n    // No pattern so so proceed to next checks from caller\n    if (!shouldIgnorePattern) return false;\n    return shouldIgnorePattern.test(getUrlForComparisonAgainstRegex());\n  }\n\n  function onlyShowForUrlPatternPresentAndFails(): boolean {\n    // No ID so this should have no affect\n    if (currentModalId === undefined) return false;\n    const currentModal = registeredModals.get(currentModalId);\n    const onlyForUrlPattern = currentModal?.onlyShowForUrlPattern;\n    // No pattern so so proceed to next checks from caller\n    if (!onlyForUrlPattern) return false;\n    // if pattern is present and fails, we cannot show the current modal\n    return !onlyForUrlPattern.test(getUrlForComparisonAgainstRegex());\n  }\n\n  function getCurrentModal() {\n    if (currentModalId === undefined) return <></>;\n    const currentModal = registeredModals.get(currentModalId)!;\n\n    if (shouldIgnoreShowingCurrentModal()) return;\n    if (onlyShowForUrlPatternPresentAndFails()) return;\n\n    return currentModal.component;\n  }\n\n  return (\n    <ModalContext.Provider\n      value={{ openModal, closeModal, currentModalProps, registerModal }}\n    >\n      {getCurrentModal()}\n      {children}\n    </ModalContext.Provider>\n  );\n}\n"]}